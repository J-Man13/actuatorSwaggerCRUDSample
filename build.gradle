import groovy.json.*

plugins {
    id 'org.springframework.boot' version '2.1.6.RELEASE'
    id 'java'
}

group 'org.example'

bootJar.archiveBaseName ='actuator-swagger-crud-sample'
bootJar.archiveAppendix = getDate()
bootJar.archiveVersion = '1.0'


apply plugin: 'io.spring.dependency-management'

sourceCompatibility = 1.8

repositories {
    mavenCentral()
}

bootRun {
    setProperIndexPatternsInElasticSearchIndexTemplateFiles()
}

dependencies {

    implementation group: 'org.springframework.boot', name: 'spring-boot-starter-web-services'

    implementation group: 'io.springfox', name: 'springfox-swagger2', version: '2.9.2'

    implementation group: 'org.springframework.boot', name: 'spring-boot-starter-data-jpa'
    implementation group: 'mysql', name: 'mysql-connector-java'


    implementation group: 'org.springframework.boot', name: 'spring-boot-starter-data-mongodb'
    implementation group: 'org.springframework.data', name: 'spring-data-releasetrain', version: 'Moore-RELEASE'


    implementation group: 'org.springframework.boot', name: 'spring-boot-starter-actuator'
    implementation group: 'org.springframework.boot', name: 'spring-boot-starter-security'
    implementation group: 'io.jsonwebtoken', name: 'jjwt', version: '0.9.1'

    implementation group: 'org.mapstruct', name: 'mapstruct-jdk8', version: '1.2.0.Final'
    implementation group: 'org.mapstruct', name: 'mapstruct-processor', version: '1.2.0.Final'
    annotationProcessor group: 'org.mapstruct', name: 'mapstruct-processor', version: '1.2.0.Final'


    implementation group: 'org.springframework.boot', name: 'spring-boot-starter-log4j2'
    implementation group: 'com.lmax', name: 'disruptor', version: '3.4.2'
    implementation group: 'org.appenders.log4j', name: 'log4j2-elasticsearch-jest', version: '1.4.4'
    implementation group: 'org.zalando', name: 'logbook-spring-boot-starter', version: '2.0.0'


    testCompile group: 'junit', name: 'junit', version: '4.12'
}

configurations.all{
    exclude module: 'spring-boot-starter-logging'
}

def getDate() {
    return new Date().format('yyyy_MM_dd')
}

processResources {
    filesMatching("**/application.properties") {
        expand( project.properties )
    }
}



def setProperIndexPatternsInElasticSearchIndexTemplateFiles (){
    //Reconstruct src/main/resources/elasticsearch-index-templates directory in the beginning
    def elasticsearchIndexTemplatesDir = new File("src/main/resources/elasticsearch-index-templates")
    if (elasticsearchIndexTemplatesDir.exists())
        elasticsearchIndexTemplatesDir.deleteDir();
    elasticsearchIndexTemplatesDir.mkdir();

    println 'Trying to read elastic index templates file templates...'

    //elasticsearch-index-templates-file-templates/common-java-application-logs-index-template-file-template.json workout
    def javaApplicationLogsIndexTemplateFileTemplate = file('src/main/resources/elasticsearch-index-templates-file-templates/common-java-application-logs-index-template-file-template.json')
    def javaApplicationLogsIndexTemplateFileTemplateParsedJson = new JsonSlurper().parseText(javaApplicationLogsIndexTemplateFileTemplate.text)
    def javaApplicationIndexPatternValues=["java-application-logs-"+bootJar.archiveBaseName.get()]
    javaApplicationLogsIndexTemplateFileTemplateParsedJson << [index_patterns:javaApplicationIndexPatternValues]
    def commonJavaApplicationLogsIndexTemplateUglyJson=JsonOutput.toJson(javaApplicationLogsIndexTemplateFileTemplateParsedJson);
    def commonJavaApplicationLogsIndexTemplateJson = JsonOutput.prettyPrint(commonJavaApplicationLogsIndexTemplateUglyJson);

    println 'Parsed elasticsearch-index-templates-file-templates/common-java-application-logs-index-template-file-template.json into common-java-application-logs-index-template.json'
    println 'common-java-application-logs-index-template.json file contents'
    println commonJavaApplicationLogsIndexTemplateJson;
    def commonJavaApplicationLogsIndexTemplateFile = new File("src/main/resources/elasticsearch-index-templates/common-java-application-logs-index-template.json")
    commonJavaApplicationLogsIndexTemplateFile.text=commonJavaApplicationLogsIndexTemplateJson;
    commonJavaApplicationLogsIndexTemplateFile.createNewFile();
    println 'common-java-application-logs-index-template.json fle successfully created'


    //elasticsearch-index-templates-file-templates/common-java-service-logs-index-template-file-template.json workout
    def commonJavaServiceLogsIndexTemplateFileTemplate = file('src/main/resources/elasticsearch-index-templates-file-templates/common-java-service-logs-index-template-file-template.json')
    def javaServiceLogsIndexTemplateFileTemplateParsedJson = new JsonSlurper().parseText(commonJavaServiceLogsIndexTemplateFileTemplate.text)
    def indexPatternValues=["java-service-logs-"+bootJar.archiveBaseName.get()]
    javaServiceLogsIndexTemplateFileTemplateParsedJson << [index_patterns:indexPatternValues]
    def commonJavaServiceLogsIndexTemplateUglyJson=JsonOutput.toJson(javaServiceLogsIndexTemplateFileTemplateParsedJson);
    def commonJavaServiceLogsIndexTemplateJson = JsonOutput.prettyPrint(commonJavaServiceLogsIndexTemplateUglyJson);

    println 'Parsed elasticsearch-index-templates-file-templates/common-java-service-logs-index-template-file-template.json into common-java-service-logs-index-template.json'
    println 'common-java-service-logs-index-template.json file contents'
    println commonJavaServiceLogsIndexTemplateJson;
    def commonJavaServiceLogsIndexTemplateFile = new File("src/main/resources/elasticsearch-index-templates/common-java-service-logs-index-template.json")
    commonJavaServiceLogsIndexTemplateFile.text=commonJavaServiceLogsIndexTemplateJson;
    commonJavaServiceLogsIndexTemplateFile.createNewFile();
    println 'common-java-service-logs-index-template.json fle successfully created'

    println 'Successfully added index patterns!'
}